generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id            String          @id @db.Uuid
  email         String          @unique(map: "users_name_key")
  nickname      String          @unique(map: "users_avatar_key")
  profile_image String?
  comment_likes comment_likes[]
  comments      comments[]
  createdVotes  votes[]         @relation("UserCreatedVotes")
}

model vote_options {
  id         BigInt @id @default(autoincrement())
  vote_id    BigInt
  name       String
  vote_count Int    @default(0)
  vote       votes  @relation(fields: [vote_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model votes {
  id                BigInt         @id @default(autoincrement())
  title             String
  description       String?        @default("")
  category_name     String
  vote_count        Int            @default(0)
  created_by        String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  expires_at        DateTime       @db.Timestamptz(6)
  category_value    String
  is_duplicate_vote Boolean
  comments          comments[]
  vote_options      vote_options[]
  users             users          @relation("UserCreatedVotes", fields: [created_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model comment_likes {
  id         BigInt    @id @default(autoincrement())
  comment_id BigInt
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  comments   comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([comment_id, user_id])
}

model comments {
  id             BigInt          @id @default(autoincrement())
  vote_id        BigInt
  user_id        String          @db.Uuid
  parent_id      BigInt?
  content        String
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  comment_likes  comment_likes[]
  comments       comments?       @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments comments[]      @relation("commentsTocomments")
  users          users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes          votes           @relation(fields: [vote_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
